{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\Rajesh\\\\Desktop\\\\Projects\\\\cov19\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\Rajesh\\\\Desktop\\\\Projects\\\\cov19\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:\\\\Users\\\\Rajesh\\\\Desktop\\\\Projects\\\\cov19\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import{fetchDailyData}from'../api/index.js';import{Line,Bar,Doughnut}from'react-chartjs-2';import styles from'./Charts.module.css';var Charts=function Charts(_ref){var _ref$data=_ref.data,confirmed=_ref$data.confirmed,recovered=_ref$data.recovered,deaths=_ref$data.deaths,country=_ref.country;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),dailyData=_useState2[0],setDailyData=_useState2[1];useEffect(function(){var fetch=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.t0=setDailyData;_context.next=3;return fetchDailyData();case 3:_context.t1=_context.sent;(0,_context.t0)(_context.t1);case 5:case\"end\":return _context.stop();}}},_callee);}));return function fetch(){return _ref2.apply(this,arguments);};}();fetch();},[]);var lineChart=dailyData.length?/*#__PURE__*/React.createElement(Line,{data:{labels:dailyData.map(function(_ref3){var date=_ref3.date;return date;}),datasets:[{data:dailyData.map(function(_ref4){var confirmed=_ref4.confirmed;return confirmed;}),label:'Infected',bordercolor:'yellow',fill:true},{data:dailyData.map(function(_ref5){var deaths=_ref5.deaths;return deaths;}),label:'Deaths',bordercolor:'red',backgroundColor:'rgba(255, 0, 0, 0.3)',fill:true}]}}):null;var barChart=confirmed?/*#__PURE__*/React.createElement(Bar,{data:{labels:['Infected','Active','Recovered','Deaths'],datasets:[{label:'People',backgroundColor:['rgb(233, 245, 10)','blue','rgb(15, 252, 3)','red'],data:[confirmed.value,confirmed.value-(recovered.value+deaths.value),recovered.value,deaths.value]}]},options:{legend:{display:false},title:{display:true,text:\"Cases in \".concat(country)}}}):null;var pieChart=confirmed?/*#__PURE__*/React.createElement(Doughnut,{data:{labels:['Active','Recovered','Deaths'],datasets:[{label:'People',backgroundColor:['blue','rgb(15, 252, 3)','red'],data:[confirmed.value-(recovered.value+deaths.value),recovered.value,deaths.value]}]},options:{legend:{display:false},title:{display:true,text:\"Situation in \".concat(country)}}}):null;return/*#__PURE__*/React.createElement(\"div\",{className:country?styles.containercountry:styles.container},country?barChart:lineChart,country?pieChart:null);};export default Charts;","map":{"version":3,"sources":["C:/Users/Rajesh/Desktop/Projects/cov19/src/Components/Charts/Charts.jsx"],"names":["React","useState","useEffect","fetchDailyData","Line","Bar","Doughnut","styles","Charts","data","confirmed","recovered","deaths","country","dailyData","setDailyData","fetch","lineChart","length","labels","map","date","datasets","label","bordercolor","fill","backgroundColor","barChart","value","legend","display","title","text","pieChart","containercountry","container"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { fetchDailyData } from '../api/index.js';\r\nimport { Line, Bar, Doughnut } from 'react-chartjs-2';\r\nimport styles from './Charts.module.css';\r\n\r\nconst Charts = ({data: {confirmed, recovered, deaths}, country}) => {\r\n    const [dailyData, setDailyData] = useState([])\r\n\r\n    useEffect(() =>{\r\n        const fetch = async () => {\r\n            setDailyData(await fetchDailyData())\r\n        }\r\n        fetch()\r\n    }, []);\r\n\r\n    const lineChart = (\r\n        dailyData.length\r\n        ? (\r\n            <Line \r\n            data= {{\r\n                labels: dailyData.map(({date}) => date),\r\n                datasets: [{\r\n                    data: dailyData.map(({confirmed}) => confirmed),\r\n                    label: 'Infected',\r\n                    bordercolor: 'yellow',\r\n                    fill: true\r\n                }, {\r\n                    data: dailyData.map(({deaths}) => deaths),\r\n                    label: 'Deaths',\r\n                    bordercolor: 'red',\r\n                    backgroundColor: 'rgba(255, 0, 0, 0.3)',\r\n                    fill: true\r\n                }]\r\n            }}\r\n            />) : null\r\n    );\r\n\r\n    const barChart = (\r\n        confirmed \r\n        ? (\r\n            <Bar \r\n             data={{\r\n                labels:['Infected', 'Active', 'Recovered', 'Deaths'],\r\n                datasets:[{\r\n                    label: 'People',\r\n                    backgroundColor: ['rgb(233, 245, 10)','blue' ,'rgb(15, 252, 3)','red'],\r\n                    data: [confirmed.value, confirmed.value-(recovered.value+deaths.value), recovered.value, deaths.value]\r\n                }]\r\n             }}\r\n             options={{\r\n                 legend: {display: false},\r\n                 title: {display: true, text: `Cases in ${country}`}\r\n             }}\r\n            />\r\n        ): null\r\n    )\r\n    \r\n\r\n    const pieChart = (\r\n        confirmed ? (\r\n            <Doughnut \r\n            data={{\r\n                labels:['Active', 'Recovered', 'Deaths'],\r\n                datasets:[{\r\n                    label: 'People',\r\n                    backgroundColor: ['blue', 'rgb(15, 252, 3)', 'red'],\r\n                    data: [confirmed.value-(recovered.value+deaths.value), recovered.value, deaths.value]\r\n                }]\r\n            }}\r\n            options={{\r\n                legend: {display: false},\r\n                title: {display: true, text: `Situation in ${country}`}\r\n            }}\r\n            />\r\n        ): null\r\n    )\r\n\r\n\r\n    return(\r\n    \r\n        <div className = {country ? styles.containercountry : styles.container}>\r\n            {country ? barChart : lineChart}\r\n            {country ? pieChart : null}          \r\n        </div>\r\n    \r\n    );\r\n}\r\n\r\nexport default Charts"]},"metadata":{},"sourceType":"module"}