{"ast":null,"code":"//import React, { useState, useEffect } from 'react';\nimport React from'react';//import { fetchDailyData } from '../api/index.js';\n// import { Line, Bar, Doughnut } from 'react-chartjs-2';\nimport{Bar,Doughnut}from'react-chartjs-2';import styles from'./Charts.module.css';var Charts=function Charts(_ref){var _ref$data=_ref.data,confirmed=_ref$data.confirmed,recovered=_ref$data.recovered,deaths=_ref$data.deaths,country=_ref.country;// const [dailyData, setDailyData] = useState([])\n// useEffect(() =>{\n//     const fetch = async () => {\n//         setDailyData(await fetchDailyData())\n//     }\n//     fetch()\n// }, []);\n// const lineChart = (\n//     dailyData.length\n//     ? (\n//         <Line \n//         data= {{\n//             labels: dailyData.map(({date}) => date),\n//             datasets: [{\n//                 data: dailyData.map(({confirmed}) => confirmed),\n//                 label: 'Infected',\n//                 bordercolor: 'yellow',\n//                 fill: true\n//             }, {\n//                 data: dailyData.map(({deaths}) => deaths),\n//                 label: 'Deaths',\n//                 bordercolor: 'red',\n//                 backgroundColor: 'rgba(255, 0, 0, 0.3)',\n//                 fill: true\n//             }]\n//         }}\n//         />) : null\n// );\nvar barChart=confirmed?/*#__PURE__*/React.createElement(Bar,{data:{labels:['Infected','Active','Recovered','Deaths'],datasets:[{label:'People',backgroundColor:['rgb(233, 245, 10)','blue','rgb(15, 252, 3)','red'],data:[confirmed.value,confirmed.value-(recovered.value+deaths.value),recovered.value,deaths.value]}]},options:{legend:{display:false},title:{display:true,text:\"Cases in \".concat(country)}}}):null;var pieChart=confirmed?/*#__PURE__*/React.createElement(Doughnut,{data:{labels:['Active','Recovered','Deaths'],datasets:[{label:'People',backgroundColor:['blue','rgb(15, 252, 3)','red'],data:[confirmed.value-(recovered.value+deaths.value),recovered.value,deaths.value]}]},options:{legend:{display:false},title:{display:true,text:\"Situation in \".concat(country)}}}):null;return/*#__PURE__*/React.createElement(\"div\",{className:country?styles.containercountry:styles.container},country?barChart:barChart,country?pieChart:null);};export default Charts;","map":{"version":3,"sources":["C:/Users/Rajesh/Desktop/Projects/cov19/src/Components/Charts/Charts.jsx"],"names":["React","Bar","Doughnut","styles","Charts","data","confirmed","recovered","deaths","country","barChart","labels","datasets","label","backgroundColor","value","legend","display","title","text","pieChart","containercountry","container"],"mappings":"AAAA;AACA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA;AACA;AACA,OAASC,GAAT,CAAcC,QAAd,KAA8B,iBAA9B,CACA,MAAOC,CAAAA,MAAP,KAAmB,qBAAnB,CAEA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,MAAqD,oBAAnDC,IAAmD,CAA5CC,SAA4C,WAA5CA,SAA4C,CAAjCC,SAAiC,WAAjCA,SAAiC,CAAtBC,MAAsB,WAAtBA,MAAsB,CAAbC,OAAa,MAAbA,OAAa,CAChE;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,GAAMC,CAAAA,QAAQ,CACVJ,SAAS,cAEL,oBAAC,GAAD,EACC,IAAI,CAAE,CACHK,MAAM,CAAC,CAAC,UAAD,CAAa,QAAb,CAAuB,WAAvB,CAAoC,QAApC,CADJ,CAEHC,QAAQ,CAAC,CAAC,CACNC,KAAK,CAAE,QADD,CAENC,eAAe,CAAE,CAAC,mBAAD,CAAqB,MAArB,CAA6B,iBAA7B,CAA+C,KAA/C,CAFX,CAGNT,IAAI,CAAE,CAACC,SAAS,CAACS,KAAX,CAAkBT,SAAS,CAACS,KAAV,EAAiBR,SAAS,CAACQ,KAAV,CAAgBP,MAAM,CAACO,KAAxC,CAAlB,CAAkER,SAAS,CAACQ,KAA5E,CAAmFP,MAAM,CAACO,KAA1F,CAHA,CAAD,CAFN,CADP,CASC,OAAO,CAAE,CACLC,MAAM,CAAE,CAACC,OAAO,CAAE,KAAV,CADH,CAELC,KAAK,CAAE,CAACD,OAAO,CAAE,IAAV,CAAgBE,IAAI,oBAAcV,OAAd,CAApB,CAFF,CATV,EAFK,CAgBN,IAjBP,CAqBA,GAAMW,CAAAA,QAAQ,CACVd,SAAS,cACL,oBAAC,QAAD,EACA,IAAI,CAAE,CACFK,MAAM,CAAC,CAAC,QAAD,CAAW,WAAX,CAAwB,QAAxB,CADL,CAEFC,QAAQ,CAAC,CAAC,CACNC,KAAK,CAAE,QADD,CAENC,eAAe,CAAE,CAAC,MAAD,CAAS,iBAAT,CAA4B,KAA5B,CAFX,CAGNT,IAAI,CAAE,CAACC,SAAS,CAACS,KAAV,EAAiBR,SAAS,CAACQ,KAAV,CAAgBP,MAAM,CAACO,KAAxC,CAAD,CAAiDR,SAAS,CAACQ,KAA3D,CAAkEP,MAAM,CAACO,KAAzE,CAHA,CAAD,CAFP,CADN,CASA,OAAO,CAAE,CACLC,MAAM,CAAE,CAACC,OAAO,CAAE,KAAV,CADH,CAELC,KAAK,CAAE,CAACD,OAAO,CAAE,IAAV,CAAgBE,IAAI,wBAAkBV,OAAlB,CAApB,CAFF,CATT,EADK,CAeN,IAhBP,CAoBA,mBAEI,2BAAK,SAAS,CAAIA,OAAO,CAAGN,MAAM,CAACkB,gBAAV,CAA6BlB,MAAM,CAACmB,SAA7D,EAGKb,OAAO,CAAGC,QAAH,CAAcA,QAH1B,CAIKD,OAAO,CAAGW,QAAH,CAAc,IAJ1B,CAFJ,CAUH,CAnFD,CAqFA,cAAehB,CAAAA,MAAf","sourcesContent":["//import React, { useState, useEffect } from 'react';\r\nimport React from 'react';\r\n//import { fetchDailyData } from '../api/index.js';\r\n// import { Line, Bar, Doughnut } from 'react-chartjs-2';\r\nimport { Bar, Doughnut } from 'react-chartjs-2';\r\nimport styles from './Charts.module.css';\r\n\r\nconst Charts = ({data: {confirmed, recovered, deaths}, country}) => {\r\n    // const [dailyData, setDailyData] = useState([])\r\n\r\n    // useEffect(() =>{\r\n    //     const fetch = async () => {\r\n    //         setDailyData(await fetchDailyData())\r\n    //     }\r\n    //     fetch()\r\n    // }, []);\r\n\r\n    // const lineChart = (\r\n    //     dailyData.length\r\n    //     ? (\r\n    //         <Line \r\n    //         data= {{\r\n    //             labels: dailyData.map(({date}) => date),\r\n    //             datasets: [{\r\n    //                 data: dailyData.map(({confirmed}) => confirmed),\r\n    //                 label: 'Infected',\r\n    //                 bordercolor: 'yellow',\r\n    //                 fill: true\r\n    //             }, {\r\n    //                 data: dailyData.map(({deaths}) => deaths),\r\n    //                 label: 'Deaths',\r\n    //                 bordercolor: 'red',\r\n    //                 backgroundColor: 'rgba(255, 0, 0, 0.3)',\r\n    //                 fill: true\r\n    //             }]\r\n    //         }}\r\n    //         />) : null\r\n    // );\r\n\r\n    const barChart = (\r\n        confirmed \r\n        ? (\r\n            <Bar \r\n             data={{\r\n                labels:['Infected', 'Active', 'Recovered', 'Deaths'],\r\n                datasets:[{\r\n                    label: 'People',\r\n                    backgroundColor: ['rgb(233, 245, 10)','blue' ,'rgb(15, 252, 3)','red'],\r\n                    data: [confirmed.value, confirmed.value-(recovered.value+deaths.value), recovered.value, deaths.value]\r\n                }]\r\n             }}\r\n             options={{\r\n                 legend: {display: false},\r\n                 title: {display: true, text: `Cases in ${country}`}\r\n             }}\r\n            />\r\n        ): null\r\n    )\r\n    \r\n\r\n    const pieChart = (\r\n        confirmed ? (\r\n            <Doughnut \r\n            data={{\r\n                labels:['Active', 'Recovered', 'Deaths'],\r\n                datasets:[{\r\n                    label: 'People',\r\n                    backgroundColor: ['blue', 'rgb(15, 252, 3)', 'red'],\r\n                    data: [confirmed.value-(recovered.value+deaths.value), recovered.value, deaths.value]\r\n                }]\r\n            }}\r\n            options={{\r\n                legend: {display: false},\r\n                title: {display: true, text: `Situation in ${country}`}\r\n            }}\r\n            />\r\n        ): null\r\n    )\r\n\r\n\r\n    return(\r\n    \r\n        <div className = {country ? styles.containercountry : styles.container}>\r\n            {/* {country ? barChart : lineChart}\r\n            {country ? pieChart : null}           */}\r\n            {country ? barChart : barChart}\r\n            {country ? pieChart : null}\r\n        </div>\r\n    \r\n    );\r\n}\r\n\r\nexport default Charts"]},"metadata":{},"sourceType":"module"}